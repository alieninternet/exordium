# This file is a part of Exordium Network Services - (c) 2002 IRCDome Development Team
# $Author$        
# $Date$                      
# $Id$

This document contains a brief overview of the functions made available by the various class's 
that make up Exordium Network Services.

S = String const &
i = int const &


Channel:: Class
---------------


String getChanCount(void)			Returns the total number of registered channels
void internalOp(S nickname,S channel)		Update services internal records to show the user as
						being opped in the given channel.
void internalVoice(S nickname,S channel)	Update services internal records to show the user as
						being voiced in the given channel.
void internalAdd(S nickname, S channel)		Adds a user internally to services channel records -
						as NOT opped, and NOT voiced - ala neutral.
void internalDel(S nickname, S channel)		Remove any record pertaining to the given user, in
						the given channel.
void internalDeOp(S nickname, S channel)	Update services internal records to show the user as
						no longer being opped.
void internalDeVoice(S nickname, S channel)	Update services internal records to show the user as
						no longer being voiced.
int getChanID(S name)				Return the unique id of a registered channel - or 0
						if non existant.
int getOnlineChanID(S name)			Return the unique - but NON peristant of any channel
						on the network - or 0 if non existant.
bool isChanRegistered(S name)			Return true if registered, false otherwise.

int getChanAccess(S name, S nick)		Return the access of the given nickname, in the
						given registered channel.

bool ifChanExists(S name)			Return true if the channel exists on the network,
						otherwise false.

int maxChannelsAccess(void)			Return total number of channel access entries across whole
						services database.

int maxChannelsUser(S nick)			Return total number of channel access entries for the 
						given nickname.

String getChanName(i number)			Return the channel name for the given (registered) id.

void setTopic(S name, S topic)			Set the topic in a channel.

void updateTopic(S name, S topic)		Update the channel records for the channel with the
						given topic.

String getchanOwner(i number)			Return the owner for the given channel - in registered 
						number format.

void chanAddAccess(S name,S nick,S level)	Add the given user to the channel with the given access.

void chanDelAccess(S name,S nick)		Delete the given users access.

void deregisterChannel(S name, S reason)	De-register a channel, giving the reason to all users 
						in the channel.

void synchChannels(void)			Synch the networks channels to what services think
						they should be like.

void synchChannel(S name, S topic, S modes)	Synch the given channel, with the given topic & modes.

void registerChannel(S name, S owner)		Register the channel to the given owners nick.

int ownedChannels(S nickname)			Return how many channels the given nickname owns.

void addChanBan(i chan,S mask,S setby,		Add a ban to a channels database record. 
		i expire,S reason)

void banChan(S chan,S mask,S reason)		Ban the given mask in a channel, and kick all users
						matching with the given reason.


Log::
-----

void logLine(S line)				Log the given line to the services log file - it is
						preappended with the current date etc.

Nickname::
----------

void updateHost(S nick,S host)			Update the nickname records with their current hostname.

String getRegNickCount(void)			Return number of registered nicknames.

String getOnlineCount(void)			Return number of online clients.

int getAccess(S service,S who)			Return the access to the given staff service of the 
						nickname.

String generatePassword(S nickname,		Return a Sha hash of the given nick/password combo.
			S password)

bool isAuthorised(S server)			Return true if the given server is permitted to
						be on the network, false otherwise.

void addCheckidentify(S nick)			Add the given nickname to the pending identification
						list (120secs to identify or nick change etc)

void addClient(S nick,S hops,S timestamp	Add the information to the onlineclients table.
	S username,S host,S vwhost
	S server,S modes,S realname)

int countHost(S hostname)			Return the number of people online from the given
						hostname

int getRequiredAccess(S service,S command)	Return the required access to use the given command 
						on a staff service.

bool isNickRegistered(S nick)			true if registered, false otherwise.

String getpass(S nick)				return the (encrypted) password for a nickname.

int getOnlineNickID(S nick)			return the unique - NON peristant id of an online
						client.

int getRegisteredNickId(S nick)			return the unique - peristant id of an online
						client.

void modeIdentify(S nick)			Set the given user usermode +r.

void updateLastID(S nick)			update last identification time to now.

String getHost(S nick)				Returns the known host for a user.

String getIdent(S nick)				Returns the ident for an online user.

bool isIdentified(S nick)			Returns true if the given nick is identified as *ANY*
						nickname.

bool isIdentified(S nick,S as)			Returns true if nick is identified as as.

String getNick(i id)				Returns the nickname associated with the given id.
						(from the peristant nick table)

String getOnlineNick(i id)			Returns the nickname associated with the given id.
						(from the NON peristant nick table)

String getIDList(S nick)			Return a space seperated list of the nicknames someone
						is identified as.

String getpendingCode(S nick)			Returns the pending authorisation code for a nickname
						registration.

bool isPending(S nick)				Returns true if the nickname is awaiting verification
						via email - *Restrict* users who are still pending!

void registerNick(S nick, S pass, S email)	Register the given nickname, with the given details.

String genAuth(S nickname)			Generated an authentication code for the given nickname.

void setLanguage(S nick, S language)		Set a users primary language to the given language.

String getURL(S nick)				Return (if any) the associated url for a nickname.

String getMSN(S nick)				Return (if any) the associated MSN for a nickname.

String getAIM(S nick)				Return (if any) the associated AIM for a nickname.

String getICQ(S nick)				Return (if any) the associated ICQ for a nickname.

String getLanguage(S nick)			Return the set language for a nickname.

String getEmail(S nick)				Return the email for a registered nickname.

String getRegDate(S nick)			Return the date the nickname was registered.

String getLastID(S nick)			Return the date someone last identified.

String getLastHost(S nick)			Return the last host identified for that nick.


Services::
----------

String getQuote(i number)			Return the fortune stored at the given location.

String getLogCount(void)			Return the total number of log entries.

String getNoteCount(void)			Return the total number of stored notes.

String getGlineCount(void)			Return the total number of glines.

void mode(S who,S chan,S mode,S target)		Make the specified service do the given mode change.

void doHelp(S nick,S service,S topic		find the associated helpfiles and send them to nick.
		S parm)

void sendEmail(S to,S subject,S text)		Queue the given text to be emailed.

void log(S nickname,S service,S text)		Log the given text - associated with the given nickname
						in the services log tables. 

void log(S nickname,S service,S text		Same as above - except used for channel specific logging.
		S cname)	

String trim(void)				Overloaded version of kine's trim


void servicePart(S service,S target)		Make the given service leave the given channel.

bool usePrivmsg(S nick)				Returns true if the user has usePrivmsg set.

bool unloadModule(S name)			Unload the given module.

bool loadModule(S name, S filename)		Load the given module and initialise it.

void serviceKick(S chan,S nick,S reason)	Kick the user out of the channel with the given number.

int countNotes(S who)				Return the number of notes for the user.

void sendNote(S from,S to,S text)		Send a note!

unsigned long random(unsigned long max)		Return a random number between 1 + given max.








